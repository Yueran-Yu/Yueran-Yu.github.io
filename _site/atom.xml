<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-01-05T16:52:50-06:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Yueran’s Learning</title><subtitle>Shoot for the moon. Even if you miss, you&apos;ll land among the stars.</subtitle><author><name>Yueran</name></author><entry><title type="html">搜集的在加拿大找工作的Tips</title><link href="http://localhost:4000/job%20hunting/2022/01/02/job_hunting_preparation/" rel="alternate" type="text/html" title="搜集的在加拿大找工作的Tips" /><published>2022-01-02T00:00:00-06:00</published><updated>2022-01-02T00:00:00-06:00</updated><id>http://localhost:4000/job%20hunting/2022/01/02/job_hunting_preparation</id><content type="html" xml:base="http://localhost:4000/job%20hunting/2022/01/02/job_hunting_preparation/">&lt;h3 id=&quot;零工作经验的毕业生&quot;&gt;零工作经验的毕业生&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;疫情期间竞争会大很多，有人投了超过100多份简历，只有三轮进入下一轮笔试机会。只有通过不断润色我们的portfolio作品集，通过简历筛选的机会更大。&lt;/li&gt;
  &lt;li&gt;有可能找到的公司规模相对比较小，工作内容可能跟预期有差距。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;笔试部分&quot;&gt;笔试部分&lt;/h3&gt;

&lt;h4 id=&quot;形式&quot;&gt;形式&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;第一种是直接考coding。倾向于software developer这类性质的工作。考试会让你share 屏幕，对方看着你整个输入的过程，考难度级别是Leetcode里easy级别的题目。 有些不共享屏幕的，但是也有限时coding
question，难度会有leetcode里面的medium的级别。&lt;/li&gt;
  &lt;li&gt;第二种是做assignment，前端工程师需要管UX/UI Design?. 这类Assignment大概有一周的时间给你做，会要求重新设计一个页面，然后完成里面js的function，或者给mockup设计稿，按照设计实现网页功能&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;面试部分&quot;&gt;面试部分&lt;/h3&gt;

&lt;h4 id=&quot;形式-1&quot;&gt;形式&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;问Behaviour Question. 考核在工作中遇到的各种情景的应对方式，考核笔试项目是不是你本人做的。&lt;/li&gt;
  &lt;li&gt;这类面试看中英语口语沟通能力，看处理问题的方式是否符合企业文化。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;做好准备投简历可能会投好几个月&quot;&gt;做好准备，投简历可能会投好几个月&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;可能投了好几个月的简历，面试机会寥寥无几&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;投简历需要知道的经验&quot;&gt;投简历需要知道的经验&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;基本上95%的公司都要求工作经验,有些1-2年，甚至5年工作经验。&lt;/li&gt;
  &lt;li&gt;要求3年以上工作经验的就不用看了，目标最好锁定在1-2年
    &lt;ul&gt;
      &lt;li&gt;虽然在学校2年期间是学习，但也一直是前端领域，加上自己的项目以及实习经验，这可以算是两年经验&lt;/li&gt;
      &lt;li&gt;大部分写着要求1-2年工作经验的职位，基本上是门槛没那么高的，因为从招聘角度来说，总不能说零工作经验要求吧， 所以1-2年的招聘要去机会比较大。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;投简历常用平台&quot;&gt;投简历常用平台&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Resource: &lt;a href=&quot;https://careersherpa.net/best-job-search-websites/&quot;&gt;33 Best Job Search Websites To Use In 2022&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Individual company websites&lt;/li&gt;
  &lt;li&gt;Angellist&lt;/li&gt;
  &lt;li&gt;Indeed (沉底的几率大)&lt;/li&gt;
  &lt;li&gt;Glassdoor&lt;/li&gt;
  &lt;li&gt;Job bank&lt;/li&gt;
  &lt;li&gt;Monster&lt;/li&gt;
  &lt;li&gt;FlexJobs&lt;/li&gt;
  &lt;li&gt;Ladders&lt;/li&gt;
  &lt;li&gt;AngeIList&lt;/li&gt;
  &lt;li&gt;Linkedin(沉底的几率大)&lt;/li&gt;
  &lt;li&gt;Getwork&lt;/li&gt;
  &lt;li&gt;Scouted&lt;/li&gt;
  &lt;li&gt;Snagajob&lt;/li&gt;
  &lt;li&gt;Robert Half&lt;/li&gt;
  &lt;li&gt;CareerBuilder&lt;/li&gt;
  &lt;li&gt;Eluta&lt;/li&gt;
  &lt;li&gt;Jobboom&lt;/li&gt;
  &lt;li&gt;Simply Hired&lt;/li&gt;
  &lt;li&gt;Google for jobs&lt;/li&gt;
  &lt;li&gt;ZipRecruiter&lt;/li&gt;
  &lt;li&gt;Workopolis&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;关于linkedin&quot;&gt;关于Linkedin&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;LinkedIn
上面发布的职位都很诱人，就是你感觉各个方面都很符合自己的条件，但是对我来说是零回复率，虽然很多教你怎么找工作的过来人都说维护好linkdin的账号很重要，但是对于零职场经验的小白来说，怎么拓展人脉，怎么打包美化你的个人介绍作用都不大。我认为linkdin
是比较适合有了职场经验后的networking的，当你的linkdin履历上面有一定工作经验的时候，同时你的connection 比较多的时候，那么会有hiring manager 对你的履历感兴趣然后来私信你。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;投简历的tips&quot;&gt;投简历的Tips&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;符合加拿大标准，直接付费买一个编辑简历的平台服务&lt;/li&gt;
  &lt;li&gt;一定要求cover letter&lt;/li&gt;
  &lt;li&gt;所有的工作都投&lt;/li&gt;
  &lt;li&gt;找工作期间，一定要把投简历当成全职工作，不要想起来才投一下（这是最最最重要的策略）&lt;/li&gt;
  &lt;li&gt;就算求职期间很受挫，也要每天规律job hunting&lt;/li&gt;
  &lt;li&gt;比如每天10点开始，在indeed上找最新的招聘信息，基本上只投just posted，因为越是抢在前面投的简历，简历被看到的机会越大&lt;/li&gt;
  &lt;li&gt;搜索职位关键字的时候要灵活，虽然是前端开发，不要只搜front end developer，可以搜：
    &lt;ul&gt;
      &lt;li&gt;front end developer&lt;/li&gt;
      &lt;li&gt;web designer&lt;/li&gt;
      &lt;li&gt;UX/UI developer&lt;/li&gt;
      &lt;li&gt;full stack developer&lt;/li&gt;
      &lt;li&gt;WordPress developer&lt;/li&gt;
      &lt;li&gt;marketing developer等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;如果提高自己的求职竞争力&quot;&gt;如果提高自己的求职竞争力&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Portfolio: 这是体现技术实力最重要的手段&lt;/li&gt;
  &lt;li&gt;Freelancing: 很多找不到全职的同学可以积极的做freelancing
    &lt;ul&gt;
      &lt;li&gt;一方面freelancing是属于实际的项目经验，面试的时候有谈资&lt;/li&gt;
      &lt;li&gt;一方面 freelancing项目可以放到你的portfolio里去，让公司看到你其实一直在做web开发相关的事情&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Github: 提供 github连接&lt;/li&gt;
  &lt;li&gt;Leetcode刷题：基本上developer都会遇到的tech interview,leetcode上最简单的题目都能训练到面试所需的技能&lt;/li&gt;
  &lt;li&gt;参加多伦多地区的slack群，像&lt;a href=&quot;https://torontojs.com/&quot;&gt;TorontoJS&lt;/a&gt;, &lt;a href=&quot;https://www.womenwhocode.com/profile/edit#my-networks&quot;&gt;womenwhocode&lt;/a&gt;, 类似的job meetup，一般都有人发招聘信息。这种投了简历，一般都会至少让你做个test&lt;/li&gt;
  &lt;li&gt;Youtube熟悉面试技巧:总结技巧，写成博客&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;关于要积极拿到面试&quot;&gt;关于要积极拿到面试&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;前期先别用内推，别申 dream companies. 前期主要是为了积累经验，每个tech test 和onsite都要认真做。&lt;/li&gt;
  &lt;li&gt;像转专业，其实很多时候只是会在学习中遗漏，因为不知道哪里是重点，这时候面试就是为了查漏补缺。不要害怕被拒，也不用急着拿offer，你就当薅资本主义养猫，免费一小时培训以及练口语。&lt;/li&gt;
  &lt;li&gt;一边面一边针对面试抓紧时间补知识点。等你觉得补得差不多了，就可以开始找人内推了。&lt;/li&gt;
  &lt;li&gt;最好能找到之前经历和这份工作相关的点。比如有个博主强调设计经验，后来拿到的offer也是骗UX engineer方向的。&lt;/li&gt;
  &lt;li&gt;能讲通为什么要转码很重要，基本上所有公司都看中JS的基本功，不怎么问library,accessibility是每个公司都问过的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mockup的网站&quot;&gt;Mockup的网站&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pramp.com/#/&quot;&gt;Pramp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;以下是来自norah的推荐学习资料和学习方法&quot;&gt;以下是来自Norah的推荐，学习资料和学习方法&lt;/h3&gt;
&lt;p&gt;1.&lt;a href=&quot;https://blog.poetries.top/browser-working-principle/guide/part1/lesson01.html#%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B&quot;&gt;浏览器工作原理与实践&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;面试准备&quot;&gt;面试准备&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Portfolio: 尽可能多的展示自己的作品，雇主可以直接看到你的程度&lt;/li&gt;
  &lt;li&gt;git: 让雇主看到你的代码上传频率&lt;/li&gt;
  &lt;li&gt;简历梳理自己的工作经历，让自己能流畅的表达出自己会些什么&lt;/li&gt;
  &lt;li&gt;面试技术要点准备：
    &lt;ul&gt;
      &lt;li&gt;重点知识梳理,ES6的新内容都要过一遍&lt;/li&gt;
      &lt;li&gt;JS 特有的闭包， this, 异步，深拷贝, promise等，这些都要知道怎么用英语表达，尽可能准备&lt;/li&gt;
      &lt;li&gt;算法：刷100道easy的题目&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;模拟面试&lt;/li&gt;
  &lt;li&gt;知识扩展: 尽可能一个方向学精。就把react这个里面的框架学好，在扩展把Node.js学一下&lt;/li&gt;
  &lt;li&gt;每次面试都是总结进步和学习的机会，多面几次就知道面试的套路流程，也知道自己那些地方不行，查漏补缺。一般小公司希望你能马上上手做事，大公司就希望你素质高学习能力好，可持续发展。&lt;/li&gt;
  &lt;li&gt;做项目参考freeCodeCamp&lt;/li&gt;
  &lt;li&gt;一般有两类面试问题：
    &lt;ul&gt;
      &lt;li&gt;Behaviour Question
        &lt;ol&gt;
          &lt;li&gt;20-30个常见的behaviour  问题&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Technical Question
        &lt;ol&gt;
          &lt;li&gt;technical question 可以准备的部分就是自己的经历和写在简历里的项目经验。&lt;/li&gt;
          &lt;li&gt;其他部分，根据职位要求的技能点，去搜索常问的面试问题，过一遍。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;程序员面试一般3-4轮&lt;/li&gt;
      &lt;li&gt;网上做题&lt;/li&gt;
      &lt;li&gt;HR电话了解情况&lt;/li&gt;
      &lt;li&gt;技术人员面试&lt;/li&gt;
      &lt;li&gt;技术经理面试&lt;/li&gt;
      &lt;li&gt;总体来说，这种海投得来的面试还是比较难的，内推会容易一些。&lt;/li&gt;
      &lt;li&gt;面试题完的题目写下来。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;norah学过的内容&quot;&gt;Norah学过的内容:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;html,css,js,《JavaScript DOM 编程艺术》,《Java Script高级程序设计》&lt;/li&gt;
  &lt;li&gt;前端框架React, Angular, Vue&lt;/li&gt;
  &lt;li&gt;工具： git,less,scss, webpack, ajax,json, fetch API, HTTP状态码，node.js&lt;/li&gt;
  &lt;li&gt;算法题：基本数据结构，排序，栈，队列，链表，二叉树，图，深度/广度优先搜索，遍历，最短路径，《啊哈，算法》，Youtube:《Leetcode题解》， github:CyC2918/CS-Notes&lt;/li&gt;
  &lt;li&gt;Data Structures: Array, Linked List, Queue, Stack, Tree, Graph, Hash Table&lt;/li&gt;
  &lt;li&gt;优先英文搜索查阅资料，是在看不懂，中文辅助&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-process-of-learning&quot;&gt;The Process of learning&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Find:
    &lt;ul&gt;
      &lt;li&gt;Look for atomic micro-projects to build. For example, navbar, different navbars, hamburger, header, hero,contact form footer etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Learn &amp;amp; Build:
    &lt;ul&gt;
      &lt;li&gt;Don’t think. Start coding. Look up tutorials on how to build a specific things and start coding. Knowing without taking action is not knowing.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Repeat:
    &lt;ul&gt;
      &lt;li&gt;Building something once is not enough. You need repetition. A lot of it. Building multiple nav, footers, heros, contact forms etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“It’s not that I’m so smart. It’s just that I stay with problems longer.”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apply-to-at-least-10-jobs-every-day-thats-300-in-a-month&quot;&gt;Apply to at least 10 jobs every day. That’s 300 in a month.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Even if you convert at 1%, that’s still 1.5 jobs. Most people don’t apply enough. Be ready to move to a different location.&lt;/li&gt;
  &lt;li&gt;Don’t worry about not qualifying. Still apply as long as it’s somewhat similar. You can learn things quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;serverless-is-the-future&quot;&gt;Serverless is the future&lt;/h3&gt;

&lt;h3 id=&quot;most-important&quot;&gt;Most Important&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Focus - You must sacrifice all of your other ‘goals’. If you want to win, you have to focus on one thing. Focus requires sacrifice. You have to go ALL IN.&lt;/li&gt;
  &lt;li&gt;Recovery from deviation - You will deviate. You will deviate. You will fall off. It’s not an ‘if’. It’s a “when”. The key to success is doubling your rate of failure. The faster you recover, the better.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Systems over goals. - Forget thinking about&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Resource: &lt;a href=&quot;https://www.zhihu.com/question/50714531/answer/1626216412&quot;&gt;加拿大留学生在本地找工作有多难？ 知乎作者：Fei西&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Resource: &lt;a href=&quot;https://www.1point3acres.com/bbs/thread-552825-1-1.html&quot;&gt;找工就业【多伦多】文科转码-自学7个月（约400小时）拿到前端offer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Resource: &lt;a href=&quot;https://www.xiaohongshu.com/discovery/item/60c11f60000000000102ff32?xhsshare=WeixinSession&amp;amp;appuid=60bf083a000000000101f224&amp;amp;apptime=1641171807&quot;&gt;Norah: 新移民登录加拿大第一份工作怎么找？简历篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Resource: &lt;a href=&quot;https://www.xiaohongshu.com/discovery/item/60c11f60000000000102ff32?xhsshare=WeixinSession&amp;amp;appuid=60bf083a000000000101f224&amp;amp;apptime=1641171807&quot;&gt;Norah: 新移民登陆加拿大第一份工作怎么找？面试篇&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Resource: &lt;a href=&quot;https://www.xiaohongshu.com/discovery/item/60df58bc000000002103902f?xhsshare=WeixinSession&amp;amp;appuid=60bf083a000000000101f224&amp;amp;apptime=1641171772&quot;&gt;Norah: 加拿大新移民中年宝妈转码前端自学分享（一）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Resource: &lt;a href=&quot;https://www.xiaohongshu.com/discovery/item/60f4dfc0000000002103dcee?xhsshare=WeixinSession&amp;amp;appuid=60bf083a000000000101f224&amp;amp;apptime=1641171748&quot;&gt;Norah: 加拿大新移民中年宝妈转码前端分享(二)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Resource: &lt;a href=&quot;https://www.xiaohongshu.com/discovery/item/610492dc000000000102d86b?xhsshare=WeixinSession&amp;amp;appuid=60bf083a000000000101f224&amp;amp;apptime=1641171724&quot;&gt;Norah: 加拿大新移民中年宝妈转码前端分享（三）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yueran</name></author><category term="Job Hunting" /><category term="front end" /><summary type="html">零工作经验的毕业生</summary></entry><entry><title type="html">制作一份前端Portfolio的重点</title><link href="http://localhost:4000/job%20hunting/2021/12/26/make_potfolio/" rel="alternate" type="text/html" title="制作一份前端Portfolio的重点" /><published>2021-12-26T00:00:00-06:00</published><updated>2021-12-26T00:00:00-06:00</updated><id>http://localhost:4000/job%20hunting/2021/12/26/make_potfolio</id><content type="html" xml:base="http://localhost:4000/job%20hunting/2021/12/26/make_potfolio/">&lt;h3 id=&quot;一些关键点&quot;&gt;一些关键点&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Always remember the keyboard and contrast accessibility&lt;/li&gt;
  &lt;li&gt;Stop trying to rate your own skills.
    &lt;ul&gt;
      &lt;li&gt;You don’t know the skill at all&lt;/li&gt;
      &lt;li&gt;You’re still learning the skill&lt;/li&gt;
      &lt;li&gt;You feel confident in the skill&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;You only need to tell them what you’re learning and what you feel confident in.&lt;/li&gt;
  &lt;li&gt;Write your CSS written mobile-first, mobile responsive is quite important.&lt;/li&gt;
  &lt;li&gt;Show me the code, and the live site.&lt;/li&gt;
  &lt;li&gt;Tell me what you’ve actually contributed to.&lt;/li&gt;
  &lt;li&gt;Prove you don’t need Bootstrap or jQuery&lt;/li&gt;
  &lt;li&gt;Speak towards your dream job.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;portfolio每个部分的细节内容&quot;&gt;Portfolio每个部分的细节内容&lt;/h3&gt;
&lt;p&gt;使用的工具是 webflow&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;自我介绍
    &lt;ul&gt;
      &lt;li&gt;告诉大家你是谁&lt;/li&gt;
      &lt;li&gt;你做什么的&lt;/li&gt;
      &lt;li&gt;你来此的目的是什么&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;作品
    &lt;ul&gt;
      &lt;li&gt;动态展示&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;简历
    &lt;ul&gt;
      &lt;li&gt;work experience&lt;/li&gt;
      &lt;li&gt;education&lt;/li&gt;
      &lt;li&gt;skills&lt;/li&gt;
      &lt;li&gt;online courses&lt;/li&gt;
      &lt;li&gt;Tools&lt;/li&gt;
      &lt;li&gt;Download Resume&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;About me&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Contact Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Resource: &lt;a href=&quot;https://www.freecodecamp.org/news/i-reviewed-fifty-portfolios-on-reddit-and-this-is-what-i-learned-e5d2b43150bc/&quot;&gt;What I learned from reviewing 50 portfolios on Reddit in 3 crazy days.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Resource: [Youtube: Beautiful Front End Developer Portfolio&lt;/td&gt;
          &lt;td&gt;Web Developer&lt;/td&gt;
          &lt;td&gt;No-Code](https://www.youtube.com/watch?v=quiX4tCj_-8&amp;amp;t=137s)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yueran</name></author><category term="Job Hunting" /><category term="front end" /><summary type="html">一些关键点</summary></entry><entry><title type="html">Deploy Project With buildpacks to Heroku and Github</title><link href="http://localhost:4000/buildpacks/2021/09/29/buildpacks_deploy_to_heroku/" rel="alternate" type="text/html" title="Deploy Project With buildpacks to Heroku and Github" /><published>2021-09-29T00:00:00-05:00</published><updated>2021-09-29T00:00:00-05:00</updated><id>http://localhost:4000/buildpacks/2021/09/29/buildpacks_deploy_to_heroku</id><content type="html" xml:base="http://localhost:4000/buildpacks/2021/09/29/buildpacks_deploy_to_heroku/">&lt;h3 id=&quot;deploy-to-heroku&quot;&gt;Deploy to Heroku&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Go to the &lt;a href=&quot;https://dashboard.heroku.com&quot;&gt;Heroku&lt;/a&gt; website, if you don’t have a account, register one first.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open Command Line, enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku login&lt;/code&gt;, hit any button, when you see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku: Press any key to open up the browser to login or q to exit:&lt;/code&gt;, it will jump to the webpage where it ask us to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Log in&lt;/code&gt; Heroku.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You may have to manually enter your username and password for Heroku in your command line if browser in your command line browser window does not open.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a Heroku Project Command:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku create spending-log --buildpack mars/create-react-app&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;This &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/mars/create-react-app-buildpack&quot;&gt;create-react-app-buildpack&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; is also great because it will also use the production build of our react-app for the deployment.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Here is the buildpacks command:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  COMMANDS
 buildpacks:add       add new app buildpack, inserting into list of buildpacks if necessary
 buildpacks:clear     clear all buildpacks set on the app
 buildpacks:info      fetch info about a buildpack
 buildpacks:remove    remove a buildpack set on the app
 buildpacks:search    search for buildpacks
 buildpacks:set
 buildpacks:versions  list versions of a buildpack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &quot;fix all the problem&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push heroku master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;deploy-to-github&quot;&gt;Deploy to Github&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn build&lt;/code&gt; to build the project, you will get a build folder, this is for displaying the content in a independent website.&lt;/li&gt;
  &lt;li&gt;Check current project the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;  file, to make sure we exclude the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn global add serve&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;serve -s build&lt;/code&gt; You will learn more about deployment from this webpage: &lt;a href=&quot;https://create-react-app.dev/docs/deployment/&quot;&gt;Deployment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create a new repository in github to store the production of this project.&lt;/li&gt;
  &lt;li&gt;Go to &lt;strong&gt;&lt;em&gt;build&lt;/em&gt;&lt;/strong&gt; folder&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &quot;deploy spending log project to github&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote add origin git@github.com:Yueran-Yu/spending-log-app.git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push --set-upstream origin master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;homepage&quot; : &quot;.&quot;&lt;/code&gt; package.json at the top.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;the-custom-deploy-script-deploysh&quot;&gt;The custom deploy script: &lt;strong&gt;deploy.sh&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;create a file &lt;strong&gt;&lt;em&gt;deploy.sh&lt;/em&gt;&lt;/strong&gt; under the folder &lt;strong&gt;&lt;em&gt;scripts&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Add the &lt;a href=&quot;https://linuxize.com/post/bash-shebang/&quot;&gt;bash shebang&lt;/a&gt; &lt;strong&gt;&lt;em&gt;#!/usr/bin/env bash&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/env bash
yarn build &amp;amp;&amp;amp;
cd build &amp;amp;&amp;amp;
git init &amp;amp;&amp;amp;
git add . &amp;amp;&amp;amp;
git commit -m &apos;deploy&apos; &amp;amp;&amp;amp;
git remote add origin git@github.com/ &amp;amp;&amp;amp;
git push -u origin master -f &amp;amp;&amp;amp;
cd -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;These are the executable script example in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Final step: add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;deploy: &quot;sh scripts/deploy.sh&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;  file.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn deploy&lt;/code&gt;, it will automatically deploy the script as you provided.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yueran</name></author><category term="Buildpacks" /><category term="front end" /><summary type="html">Deploy to Heroku</summary></entry><entry><title type="html">The Difference Between a Framework and Library</title><link href="http://localhost:4000/react/2021/07/19/framework_and_library/" rel="alternate" type="text/html" title="The Difference Between a Framework and Library" /><published>2021-07-19T00:00:00-05:00</published><updated>2021-07-19T00:00:00-05:00</updated><id>http://localhost:4000/react/2021/07/19/framework_and_library</id><content type="html" xml:base="http://localhost:4000/react/2021/07/19/framework_and_library/">&lt;h3 id=&quot;what-the-difference-between-framework-and-library&quot;&gt;What the difference between framework and library?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Both libraries and frameworks are reusable code written by someone else. Their purpose is to help you solve common
problems in easier ways.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;the-technical-difference&quot;&gt;The Technical Difference&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The technical difference between a framework and library lies in a term called inversion of control. When you use a
library, you are in charge of the application flow. You choose when and where to call the library. When you use a
framework, the framework is in charge of the flow. It provides you with a few places to plug in your code, but it calls
the code you plugged in as needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../../assets/images/frameworkvslibraries.png&quot; width=&quot;800&quot; alt=&quot;frameworks vs libraries&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You tell libraries what to do, frameworks tell you what to do.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;one-definition-i-know-is&quot;&gt;One definition I know is:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;a framework is a software where you plug your code into&lt;/li&gt;
  &lt;li&gt;a library is a software that you plug into your code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;why-is-react-a-library-and-not-a-framework&quot;&gt;Why is React a library and not a framework?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;React itself does not include many of the React-specific libraries you’re going to need for most projects. Angular and
Vue, by comparison, include many more tools all bundled within the core package itself.&lt;/li&gt;
  &lt;li&gt;Many developers consider this discussion of what is and isn’t a library to be trivial. But it has real consequences
for our development process. In other words, because React is a library and not a framework, becoming a skilled React
developer entails having a good knowledge of third-party React libraries.
    &lt;ul&gt;
      &lt;li&gt;The Third-Party React libraries example:&lt;/li&gt;
      &lt;li&gt;Redux, Redux Form, React Router, Styled Component&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;since-react-is-a-library-you-must-choose-the-tools-on-your-own&quot;&gt;Since React is a library, you must choose the tools on your own&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;That means, in order to build complete React applications, you will need to choose these packages and tools on your
own.&lt;/li&gt;
  &lt;li&gt;For a form library, I have to decide whether I want to use the package React Hook Form or Formik. These are both
React-specific form libraries to add important features to our forms like validation.&lt;/li&gt;
  &lt;li&gt;For testing my React application, I might use either React Testing Library, Jest, or some combination of the two.&lt;/li&gt;
  &lt;li&gt;For making network requests, I might need to choose between the Fetch API and Axios. I might also need to decide if I
want to add an additional library to make managing my server state easier, such as React Query or SWR.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://digitalya.co/blog/is-react-a-framework-or-library/&quot;&gt;3 Reference: Is React a framework or library? - Everything you need to know &lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When choosing the right libraries and frameworks to build your mobile app or we app, it&lt;/li&gt;
  &lt;li&gt;s important that a framework is popular so that it has a well-established dev community around it. If you were to
search on google or StackOverflow a question regarding some specific functionality or bug inside the framework, you’d
most likely want to see other people who might have encountered the issue and found a solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resource-reference&quot;&gt;Resource Reference:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://sofienebk.medium.com/what-is-the-difference-between-a-framework-and-library-2b712a1a1c41&quot;&gt;1 What is the Difference Between a Framework and Library?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://betterprogramming.pub/libraries-vs-frameworks-whats-the-difference-5f28c53dcffe&quot;&gt;2 Libraries vs. Frameworks — What’s the Difference?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/is-react-a-library-or-a-framework/&quot;&gt;3 Is React a Library or a Framework? Here’s Why it Matters&lt;/a&gt;&lt;/p&gt;</content><author><name>Yueran</name></author><category term="React" /><category term="front end" /><summary type="html">What the difference between framework and library?</summary></entry><entry><title type="html">Hash Router VS. Browser Router</title><link href="http://localhost:4000/react%20router/2021/06/27/hash_router_browser_router/" rel="alternate" type="text/html" title="Hash Router VS. Browser Router" /><published>2021-06-27T00:00:00-05:00</published><updated>2021-06-27T00:00:00-05:00</updated><id>http://localhost:4000/react%20router/2021/06/27/hash_router_browser_router</id><content type="html" xml:base="http://localhost:4000/react%20router/2021/06/27/hash_router_browser_router/">&lt;h3 id=&quot;hashrouter&quot;&gt;HashRouter&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It uses URL hash, it puts no limitations on supported browsers or web server. Server-side routing is independent from client-side routing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Backward-compatible single-page application can use it as example.com/#/react/route. The setup cannot be backed up by server-side rendering because it’s / path that is served on server side, #/react/route URL hash cannot be read from server side. On client side, window.location.hash is parsed by React router. React router renders a component that it was configured to render for /react/route, similarly to BrowserRouter.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Most importantly, HashRouter use cases aren’t limited to SPA. A website may have legacy or search engine-friendly server-side routing, while React application may be a widget that maintains its state in URL like example.com/server/side/route#/react/route. Some page that contains React application is served on server side for /server/side/route, then on client side React router renders a component that it was configured to render for /react/route, similarly to previous scenario.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HashRouter basically it uses the hash in the URL to render the component.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;browserrouter&quot;&gt;BrowserRouter&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;BrowserRouter, it uses HTML5 history API to render the component.It uses history API, i.e. it’s unavailable for legacy browsers (IE 9 and lower and contemporaries). Client-side React application is able to maintain clean routes like example.com/react/route but needs to be backed by web server. Usually this means that web server should be configured for single-page application, i.e. same index.html is served for /react/route path or any other route on server side. On client side, window.location.pathname is parsed by React router. React router renders a component that it was configured to render for /react/route.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Additionally, the setup may involve server-side rendering, index.html may contain rendered components or data that are specific to current route.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/51974369/what-is-the-difference-between-hashrouter-and-browserrouter-in-react&quot;&gt;Resource: What the difference between hash router and browser router&lt;/a&gt;&lt;/p&gt;</content><author><name>Yueran</name></author><category term="React Router" /><category term="front end" /><summary type="html">HashRouter It uses URL hash, it puts no limitations on supported browsers or web server. Server-side routing is independent from client-side routing.</summary></entry><entry><title type="html">Controlled Component VS. Uncontrolled Component</title><link href="http://localhost:4000/react/2021/06/13/control_uncontrol_component/" rel="alternate" type="text/html" title="Controlled Component VS. Uncontrolled Component" /><published>2021-06-13T00:00:00-05:00</published><updated>2021-06-13T00:00:00-05:00</updated><id>http://localhost:4000/react/2021/06/13/control_uncontrol_component</id><content type="html" xml:base="http://localhost:4000/react/2021/06/13/control_uncontrol_component/">&lt;ul&gt;
  &lt;li&gt;Reference Article:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42522515/what-are-react-controlled-components-and-uncontrolled-components&quot;&gt;1. Controlled Component&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/#conclusion&quot;&gt;2. Controlled and uncontrolled form inputs in React don’t have to be complicated&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;Controlled Component&lt;/em&gt; is one that takes its current value through &lt;strong&gt;props&lt;/strong&gt; and notifies changes through callback like &lt;strong&gt;&lt;em&gt;onChange&lt;/em&gt;&lt;/strong&gt; A parent component “controls” it by handling the callback and managing its own state and passing the new values as props to the controlled component. You could also call this a “dumb component”.
&amp;amp;&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;Uncontrolled Component&lt;/em&gt; is one that stores its own state internally, and you query the DOM using a &lt;strong&gt;ref&lt;/strong&gt; to find its current value when you need it. This is a bit more like traditional HTML.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;c1&quot;&gt;// Controlled:&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//Uncontrolled:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Use `inputRef.current.value` to read the current value of &amp;lt;input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Yueran</name></author><category term="React" /><category term="front end" /><summary type="html">Reference Article: 1. Controlled Component 2. Controlled and uncontrolled form inputs in React don’t have to be complicated</summary></entry><entry><title type="html">Thinking About Data Flow</title><link href="http://localhost:4000/coding%20rules/2021/04/10/thinking_about_data_flow/" rel="alternate" type="text/html" title="Thinking About Data Flow" /><published>2021-04-10T00:00:00-05:00</published><updated>2021-04-10T00:00:00-05:00</updated><id>http://localhost:4000/coding%20rules/2021/04/10/thinking_about_data_flow</id><content type="html" xml:base="http://localhost:4000/coding%20rules/2021/04/10/thinking_about_data_flow/">&lt;ol&gt;
  &lt;li&gt;) Did you notice what Yi did in the last video? He is doing something that a lot of senior developers do, and that is they think about their data flow. They don’t just go ahead and start coding.
    &lt;blockquote&gt;

    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;) If it works the first time that’s great, they are done.
    &lt;blockquote&gt;

    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;) No, in their head or maybe on a piece of paper or in a diagram they’re thinking about how data is moving. For example, in our case from our redux store into our components. Yi is deciding how much of that data do I want by using selectors and then deciding where should that data live. Where should I put that data.
    &lt;blockquote&gt;

    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;) No one rule while you want to do is to think about your application and why you think at the moment the client or yourself wants for the project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;) They keep things extensible. However, at the same time, they decide what makes sense what components component should be in charge of what should be a connected component to a redux store or should it be a simple presentational component that just renders something simple.
    &lt;blockquote&gt;

    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;) Yi understands every part of his app, every part of the feature that he is working it so that when he notices that something perhaps is inefficient like possibly iterating through a large array he converts it or normalizes the data into an object or what we call a hash table so that it’s more efficient. Really understanding your code how the program runs allows you to make these smart decisions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;) Thinking about data flow in your application is going to help us further in the course when we start talking about things like graphQL.
    &lt;blockquote&gt;

    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;) Because at the end of the day what we do as developers is received data and present that data to a user to a customer and we let that customer manipulate that data.
    &lt;blockquote&gt;

    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;) But we engineer that. How it flows, how it moves, how it changes is our job so next time you’re working on a feature or a product or even a component. Start thinking about that data flow. How that component is going to affect that data flow, what’s going to need, what it’s going to present and what it’s going to change that’s going to make you a better developer.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yueran</name></author><category term="Coding Rules" /><category term="learning" /><summary type="html">) Did you notice what Yi did in the last video? He is doing something that a lot of senior developers do, and that is they think about their data flow. They don’t just go ahead and start coding.</summary></entry><entry><title type="html">How to Write Extensible Code</title><link href="http://localhost:4000/coding%20rules/2021/03/16/extensible_code/" rel="alternate" type="text/html" title="How to Write Extensible Code" /><published>2021-03-16T00:00:00-05:00</published><updated>2021-03-16T00:00:00-05:00</updated><id>http://localhost:4000/coding%20rules/2021/03/16/extensible_code</id><content type="html" xml:base="http://localhost:4000/coding%20rules/2021/03/16/extensible_code/">&lt;h4 id=&quot;are-you-starting-to-feel-like-were-doing-a-lot-of-things-over-and-over-the-same-way-were-creating-reducers-and-actions-and-selectors-and-connecting-components-and-rendering-components-and-if-things-seem-repetitive-to-you-thats-actually-a-good-thing-because-what-were-doing-is-were-making-things-very-simple&quot;&gt;Are you starting to feel like we’re doing a lot of things over and over the same way we’re creating reducers and actions and selectors and connecting components and rendering components and if things seem repetitive to you, that’s actually a good thing because what we’re doing is we’re making things very simple.&lt;/h4&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h4 id=&quot;now-were-creating-a-lot-of-files-in-our-project-but-these-files-are-all-usually-under-one-hundred-lines-of-code-each-file-is-very-very-simple-isnt-it-we-havent-run-any-crazy-long-thousand-line-algorithms-everything-is-nice-small-and-simple-and-if-you-notice-each-one-makes-each-component-very-very-small-and-also-very-extensible-that-is-he-reuses-components-and-features-across-the-application-so-that-hes-not-constantly-doing-the-same-thing-over-and-over&quot;&gt;Now we’re creating a lot of files in our project but these files are all usually under one hundred lines of code. Each file is very very simple isn’t it. We haven’t run any crazy long thousand line algorithms. Everything is nice small and simple. And if you notice, each one makes each component very very small and also very extensible. That is he reuses components and features across the application so that he’s not constantly doing the same thing over and over.&lt;/h4&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h4 id=&quot;its-ok-if-were-copying-code-that-is-well-similar-in-lets-say-a-selector-or-using-map-state-to-props-over-and-over-the-idea-is-that-hes-structured-the-project-in-such-a-way-that-your-eye-could-come-to-the-project-and-really-easily-add-features-really-easily-add-a-custom-button-or-a-cart-item-and-this-is-a-sign-of-a-really-good-developer-because-when-hes-coding-he-is-coding-for-the-future-as-well&quot;&gt;It’s ok if we’re copying code that is well similar in let’s say a selector or using map state to props over and over. The idea is that he’s structured the project in such a way that your eye could come to the project and really easily add features, really easily add a custom button or a cart item. And this is a sign of a really good developer. Because when he’s coding, he is coding for the future as well.&lt;/h4&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h4 id=&quot;he-knows-that-by-thinking-a-little-bit-about-how-to-make-the-code-more-extensible-in-the-future-he-will-benefit-as-he-takes-on-more-and-more-features-because-he-can-use-the-same-functionality-in-one-part-of-the-app-and-in-another-part-of-the-app&quot;&gt;He knows that by thinking a little bit about how to make the code more extensible. In the future he will benefit as he takes on more and more features because he can use the same functionality in one part of the app and in another part of the app.&lt;/h4&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h4 id=&quot;react-and-redux-really-allows-us-to-create-extensible-code-and-the-other-word-that-you-might-be-thinking-of-is-also-predictable-code&quot;&gt;React and Redux really allows us to create extensible code and the other word that you might be thinking of is also predictable code.&lt;/h4&gt;</content><author><name>Yueran</name></author><category term="Coding Rules" /><category term="learning" /><summary type="html">Are you starting to feel like we’re doing a lot of things over and over the same way we’re creating reducers and actions and selectors and connecting components and rendering components and if things seem repetitive to you, that’s actually a good thing because what we’re doing is we’re making things very simple.</summary></entry><entry><title type="html">Redux</title><link href="http://localhost:4000/redux/2021/02/27/redux/" rel="alternate" type="text/html" title="Redux" /><published>2021-02-27T00:00:00-06:00</published><updated>2021-02-27T00:00:00-06:00</updated><id>http://localhost:4000/redux/2021/02/27/redux</id><content type="html" xml:base="http://localhost:4000/redux/2021/02/27/redux/">&lt;p&gt;&lt;a href=&quot;https://redux.js.org/tutorials/essentials/part-1-overview-concepts&quot;&gt;Redux Tutorial Reference&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Good for managing large state&lt;/li&gt;
  &lt;li&gt;Useful for sharing data between components&lt;/li&gt;
  &lt;li&gt;Predictable state management using the 3 principles
    &lt;ul&gt;
      &lt;li&gt;Single source of truth&lt;/li&gt;
      &lt;li&gt;State is read only&lt;/li&gt;
      &lt;li&gt;Changes using pure functions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../../../../../assets/images/Redux_Flow.png&quot; width=&quot;800&quot; alt=&quot;Redux  Flow&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;redux-terms-and-concepts&quot;&gt;Redux Terms and Concepts&lt;/h3&gt;
&lt;h3 id=&quot;1-react-redux&quot;&gt;1. React-Redux&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Redux can integrate with any UI framework, and is most frequently used with React. &lt;strong&gt;&lt;em&gt;React-Redux&lt;/em&gt;&lt;/strong&gt; is our official package that lets your React components interact with with a Redux store by reading pieces of state and dispatching actions to update the store.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-immutability&quot;&gt;2. Immutability&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;“Mutable” means “changeable”. If something is “immutable”, it can never be changed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-update-values-immutably&quot;&gt;3. Update values immutably&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In order to update values immutably, your code must make copies of existing objects/arrays, and then modify the copies.&lt;/li&gt;
  &lt;li&gt;We can do this by hand using JavaScript’s array / object spread operators, as well as array methods that return new copies of the array instead of mutating the original array:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// To safely update obj.a.c, we have to copy each piece&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//copy obj  /overwrite a / copy obj.a / overwrite c&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;na&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Redux expects that all state updates are done immutably.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-actions&quot;&gt;4. Actions&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;An action is a plain Javascript object that has a &lt;strong&gt;type&lt;/strong&gt; field. You can think of an action as an event that describes something that happened in the application.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;type&lt;/strong&gt; field should be a string that gives this action a descriptive name, like “todos/todoAdded”. We usually write that types sting like “domain/eventName”, where the first part is the feature or category that this action belongs to, and the second part is the specific thing that happened.&lt;/li&gt;
  &lt;li&gt;An action object can have other fields with additional information about &lt;strong&gt;what happened&lt;/strong&gt;. By convention, we put that information in a field called payload.&lt;/li&gt;
  &lt;li&gt;A typical action object might look like this:
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTodoAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;todos/todoAdded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Buy milk&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h3 id=&quot;5-action-creator&quot;&gt;5. Action Creator&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;An &lt;strong&gt;action creator&lt;/strong&gt; is a function that creates and returns an action object. We typically use these so we don’t have to write the action object by hand every time.
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTodo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;todos/todoAdded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-reducers&quot;&gt;6. Reducers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A reducer is a function that receives the current &lt;strong&gt;state&lt;/strong&gt; and an &lt;strong&gt;action&lt;/strong&gt; object, decides how to update the state if necessary, and returns the new state: &lt;strong&gt;(state, action) =&amp;gt; newState&lt;/strong&gt; You can think of a reducer as an event listener which handles events based on the received action (event) type.&lt;/li&gt;
  &lt;li&gt;Reducers must always follow some specific rules:
    &lt;ul&gt;
      &lt;li&gt;They should only calculate the new state value based on the &lt;strong&gt;state&lt;/strong&gt; and &lt;strong&gt;action&lt;/strong&gt; arguments.&lt;/li&gt;
      &lt;li&gt;They are not allowed to modify the existing &lt;strong&gt;state&lt;/strong&gt;. Instead, they must make immutable updates, by coping the existing &lt;strong&gt;state&lt;/strong&gt; and making changes to the copied values.&lt;/li&gt;
      &lt;li&gt;They must not do any asynchronous logic, calculate random values, or cause other “side effects”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The logic inside reducer functions typically follows the same series of steps:
    &lt;ul&gt;
      &lt;li&gt;Check to see if the reducer cares about this action
        &lt;ul&gt;
          &lt;li&gt;If so, make a copy of the state, update the copy with new values, and return it.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Otherwise, return of a reducer, showing the steps that each reducer should follow:&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counterReducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// check to see if the reducer cares about this action&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;counter/increment&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// if so, make a copy of &apos;state&apos;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// and update the copy with the new value&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// otherwise return the existing state unchanged&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;A redux reducer function is exactly the same idea as this “reduce callback” function!&lt;/li&gt;
  &lt;li&gt;We can say that Redux reducers reduce a set of actions (over time) into a single state.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;7-store&quot;&gt;7. Store&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The current Redux application &lt;strong&gt;&lt;em&gt;state&lt;/em&gt;&lt;/strong&gt; lives in an object called the &lt;em&gt;store&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;The store is created by passing in a reducer, and has a method called &lt;strong&gt;getState&lt;/strong&gt; that returns the current state value:
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;configureStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;configureStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counterReducer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// {value: 0}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;8-dispatch&quot;&gt;8. Dispatch&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The Redux store has a method called &lt;strong&gt;dispatch&lt;/strong&gt;. The only way to update the state is to call &lt;strong&gt;store.dispatch()&lt;/strong&gt; and pass in an action object. The store will run its reducer function and save the new state value inside, and we can call &lt;strong&gt;getState()&lt;/strong&gt; to retrieve the updated value:
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;counter/increment&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// {value:1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;You can think of dispatching actions as “triggering an event” in the application. Something happened, and we want the store to know about it. Reducers act like event listeners, and when they hear an action they are interested in, they update the state in response.&lt;/li&gt;
  &lt;li&gt;We typically call action creators to dispatch the right action:
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;counter/increment&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// {value: 2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;h4 id=&quot;redux-is-a-library-for-managing-global-application-state&quot;&gt;Redux is a library for managing global application state&lt;/h4&gt;
        &lt;ul&gt;
          &lt;li&gt;Redux is typically used with the React-Redux library for integrating Redux and React together&lt;/li&gt;
          &lt;li&gt;Redux Toolkit is the recommended way to write Redux logic&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;h4 id=&quot;redux-uses-a-one-way-data-flow-app-structure&quot;&gt;Redux uses a “one-way data flow” app structure&lt;/h4&gt;
        &lt;ul&gt;
          &lt;li&gt;State describes the condition of the app at a point in time, and UI render based on that state&lt;/li&gt;
          &lt;li&gt;When something happens in the app”
            &lt;ul&gt;
              &lt;li&gt;The UI dispatches an action&lt;/li&gt;
              &lt;li&gt;The store runs the reducers and the state is updated based on what occurred&lt;/li&gt;
              &lt;li&gt;The store notifies the UI that the state has changed&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;The UI re-renders based on the new state&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Redux uses serval types of code
        &lt;ul&gt;
          &lt;li&gt;Actions are plain objects with a &lt;strong&gt;type&lt;/strong&gt; field, and describe “what happened” in the app&lt;/li&gt;
          &lt;li&gt;Reducers are functions that calculate a new state value based on previous state + an action&lt;/li&gt;
          &lt;li&gt;A redux store runs the root reducer whenever an action is dispatched&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yueran</name></author><category term="Redux" /><category term="react" /><summary type="html">Redux Tutorial Reference</summary></entry><entry><title type="html">Query Reference and Query Snapshot</title><link href="http://localhost:4000/firebase/2021/02/19/query_ref_query_snapshot/" rel="alternate" type="text/html" title="Query Reference and Query Snapshot" /><published>2021-02-19T00:00:00-06:00</published><updated>2021-02-19T00:00:00-06:00</updated><id>http://localhost:4000/firebase/2021/02/19/query_ref_query_snapshot</id><content type="html" xml:base="http://localhost:4000/firebase/2021/02/19/query_ref_query_snapshot/">&lt;h3 id=&quot;brief-note&quot;&gt;Brief Note&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A query is a request we make to firestore to give us something from the database.&lt;/li&gt;
  &lt;li&gt;Firestore returns us two types of objects: references and snapshots. Of these objects, they can be either Document or Collection versions.&lt;/li&gt;
  &lt;li&gt;Firestore will &lt;strong&gt;always&lt;/strong&gt; return us these objects, even if nothing exists at from that query.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;queryreference&quot;&gt;QueryReference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A queryReference object is an object that represents the “current” place in the database that we are querying.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;We get them by calling either:&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;firestore.doc(‘/users/:userId’);&lt;/li&gt;
      &lt;li&gt;firestore.collections(‘/users’);&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The queryReference object does not have the actual data of the collection or document. It instead has properties that tell us details about it, or the method to get the Snapshot object which gives us the data we are looking for.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;documentreference-vs-collectionreference&quot;&gt;DocumentReference vs CollectionReference&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CollectionReference - QuerySnapshot: collectionRef.get()&lt;/li&gt;
  &lt;li&gt;DocumentReference - DocumentSnapshot: documentRef.get()&lt;/li&gt;
  &lt;li&gt;We use documentRef objects to perform our CRUD methods (create, retrieve, update, delete). The documentRef methods are &lt;strong&gt;.set()&lt;/strong&gt;,
&lt;strong&gt;.get()&lt;/strong&gt;, &lt;strong&gt;update()&lt;/strong&gt;, and &lt;strong&gt;.delete()&lt;/strong&gt; respectively.&lt;/li&gt;
  &lt;li&gt;We also can add documents to collections using the collectionRef object using the &lt;strong&gt;.add()&lt;/strong&gt; method. //collectionRef.add({//value:prop})&lt;/li&gt;
  &lt;li&gt;We get the snapshotObject from the referenceObject using the &lt;strong&gt;.get()&lt;/strong&gt; method. ie. documentRef.get() or collectionRef.get()
    &lt;ul&gt;
      &lt;li&gt;documentRef returns a &lt;strong&gt;documentSnapshot&lt;/strong&gt; object.&lt;/li&gt;
      &lt;li&gt;collectionRef returns a &lt;strong&gt;querySnapshot&lt;/strong&gt; object.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;documentsnapshot&quot;&gt;DocumentSnapshot&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;We get a documentSnapshot object from our documentReference object.&lt;/li&gt;
  &lt;li&gt;The documentSnapshot object allows us to check if a document exists at this query using the &lt;strong&gt;.exists&lt;/strong&gt; property which returns a boolean.&lt;/li&gt;
  &lt;li&gt;We can also get the actual properties on the object by calling the &lt;strong&gt;.data&lt;/strong&gt; method, which returns us a JSON object of the document.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yueran</name></author><category term="Firebase" /><category term="database" /><summary type="html">Brief Note A query is a request we make to firestore to give us something from the database. Firestore returns us two types of objects: references and snapshots. Of these objects, they can be either Document or Collection versions. Firestore will always return us these objects, even if nothing exists at from that query.</summary></entry></feed>