<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[Javascript Function]]></title>
      <url>/javascript/2020/12/02/javascript_function/</url>
      <content type="html"><![CDATA[<h3 id="key-concepts-about-function">Key concepts about function</h3>
<ul>
  <li>Call time</li>
  <li>Scope</li>
  <li>Closure</li>
  <li>Parameter</li>
  <li>Return value</li>
  <li>Call Stack</li>
  <li>Hoisting</li>
  <li>Arguments (except arrow function)</li>
  <li>This</li>
</ul>

<p><img src="../../../../../assets/images/Closure.png" width="400" alt="closure" />
<img src="../../../../../assets/images/func_hoisting.png" width="400" alt="func_hoisting.png" />
<img src="../../../../../assets/images/JS_FUNCTION1.png" width="400" alt="" />
<img src="../../../../../assets/images/JS_FUNCTION2.png" width="400" alt="" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// if you don't give any condition to the function, 'this' will point to the 'window'</span>
</code></pre></div></div>
<h3 id="if-you-dont-give-any-condition-to-the-function-this-will-point-to-the-window">if you don’t give any condition to the function, ‘this’ will point to the ‘window’</h3>

<h4 id="we-must-use">We must use:</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span>
<span class="nx">sayHi</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</code></pre></div></div>
<p><img src="../../../../../assets/images/why_use_this.png" width="400" alt="why_use_this.png" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span>
<span class="p">}</span>

<span class="nx">add</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="c1">// first value used to occupy the position</span>
</code></pre></div></div>

<h3 id="arrow-function">Arrow Function</h3>
<ul>
  <li><strong>Regular function ‘this’ refers parent, left of the dot</strong></li>
  <li><strong>Arrow function refers to it’s current surrounding scope</strong>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// regular function</span>
<span class="kd">const</span> <span class="nx">bob</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bob</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">smith</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">sayName</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nb">self</span> <span class="o">=</span> <span class="k">this</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello, my name is </span><span class="p">${</span><span class="nb">self</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nb">self</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">bob</span><span class="p">.</span><span class="nx">sayName</span><span class="p">()</span>
<span class="c1">//result: Hello, my name is bob smith</span>
</code></pre></div>    </div>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// arrow function</span>
  <span class="kd">const</span> <span class="nx">bob1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bob</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">smith</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">sayName</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello, my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
      <span class="p">})</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="nx">bob1</span><span class="p">.</span><span class="nx">sayName</span><span class="p">()</span>
<span class="c1">// Hello, my name is bob smith</span>

</code></pre></div></div>

<h3 id="arrow-function-hoisting">Arrow Function Hoisting</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// sayHi() is a normal function</span>
  <span class="nx">sayHi</span><span class="p">()</span>
  <span class="kd">const</span> <span class="nx">john</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">john</span><span class="dl">'</span>
  <span class="kd">const</span> <span class="nx">peter</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Peter</span><span class="dl">'</span>

  <span class="kd">function</span> <span class="nx">sayHi</span><span class="p">(</span><span class="nx">person</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Susan</span><span class="dl">"</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi </span><span class="p">${</span><span class="nx">person</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="c1">// this is an arrow function, but called before it initialized</span>
  <span class="nx">sayHello</span><span class="p">()</span>
  <span class="kd">const</span> <span class="nx">sayHello</span> <span class="o">=</span> <span class="p">(</span><span class="nx">person</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Bob</span><span class="dl">"</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">person</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
</code></pre></div></div>
<h3 id="array-destructing">Array Destructing</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Array destructing</span>
  <span class="kd">const</span> <span class="nx">friends</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">john</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">peter</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">bob</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">alice</span><span class="dl">'</span><span class="p">]</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">x</span><span class="p">]</span> <span class="o">=</span> <span class="nx">friends</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">x</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="object-destructing">Object Destructing</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// Object destructing</span>
    <span class="kd">const</span> <span class="nx">bob</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">first</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bob</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">last</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sanders</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">city</span><span class="p">:</span> <span class="dl">'</span><span class="s1">chicago</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">siblings</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">sister</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jane</span><span class="dl">'</span>
      <span class="p">},</span>
    <span class="p">}</span>

    <span class="kd">const</span> <span class="p">{</span>
      <span class="na">first</span><span class="p">:</span> <span class="nx">firstName</span><span class="p">,</span>
      <span class="nx">last</span><span class="p">,</span>
      <span class="nx">city</span><span class="p">,</span>
      <span class="nx">zip</span><span class="p">,</span>
      <span class="nx">hop</span><span class="p">,</span>
      <span class="na">siblings</span><span class="p">:</span> <span class="p">{</span><span class="na">sister</span><span class="p">:</span> <span class="nx">favoriteSibling</span><span class="p">},</span>
    <span class="p">}</span> <span class="o">=</span> <span class="nx">bob</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">last</span><span class="p">,</span> <span class="nx">city</span><span class="p">,</span> <span class="nx">hop</span><span class="p">,</span><span class="nx">favoriteSibling</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="static-scoping-vs-dynamic-scoping">Static Scoping VS Dynamic Scoping</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">fn1</span><span class="p">(){</span>

    <span class="kd">function</span> <span class="nx">fn2</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// when the fn2 function has a parameter, the final result will be  4</span>
    <span class="c1">// function fn2(a){</span>
    <span class="c1">// console.log(a)</span>
    <span class="c1">// }</span>

    <span class="kd">function</span> <span class="nx">fn3</span><span class="p">(){</span>
        <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">4</span>
        <span class="nx">fn2</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="k">return</span> <span class="nx">fn3</span>
  <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nx">fn1</span><span class="p">()</span>
    <span class="nx">fn</span><span class="p">()</span> <span class="c1">// result: 2</span>
</code></pre></div></div>
<p><strong>Answer:</strong></p>
<blockquote>
  <p>静态作用域，看定义的位置，跟在哪调用无关, fn2中没有a，就会去它定义的上一层中找，就是fn1中, 跟在哪调用无关，因为JS是静态作用域的，只看它在何处定义的.</p>

  <p>我的想法是动态作用域的想法，会在运行时沿着调用链查找；但是JS规定的是静态作用域，一个变量定义的那一刻，作用域就已经确定了，跟调用毛关系没有</p>
</blockquote>

]]></content>
      <categories>
        
          <category> javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Javascript Array]]></title>
      <url>/javascript/2020/11/25/javascript_array/</url>
      <content type="html"><![CDATA[<h3 id="create-an-array">Create an Array</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

  <span class="c1">// Transform</span>
  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">1,2,3</span><span class="dl">'</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">123</span><span class="dl">'</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">''</span><span class="p">)</span>
  <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="dl">'</span><span class="s1">123</span><span class="dl">'</span><span class="p">)</span>
  <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">({</span><span class="mi">0</span><span class="p">:</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="dl">'</span><span class="s1">d</span><span class="dl">'</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span><span class="mi">4</span><span class="p">})</span>

  <span class="c1">//Special occasion</span>
  <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">({</span><span class="mi">0</span><span class="p">:</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="dl">'</span><span class="s1">d</span><span class="dl">'</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
  <span class="c1">// result: (2)["a", "b"]</span>
</code></pre></div></div>
<h3 id="pseudo-array">Pseudo-Array</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="dl">'</span><span class="s1">d</span><span class="dl">'</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
  <span class="c1">// here is the prototype chain of the pseudo-array arr</span>
  <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="dl">"</span><span class="s2">d</span><span class="dl">"</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
  <span class="mi">0</span><span class="p">:</span> <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span>
  <span class="mi">1</span><span class="p">:</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span>
  <span class="mi">2</span><span class="p">:</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span>
  <span class="mi">3</span><span class="p">:</span> <span class="dl">"</span><span class="s2">d</span><span class="dl">"</span>
  <span class="nx">length</span><span class="p">:</span> <span class="mi">3</span>
  <span class="nx">__proto__</span><span class="p">:</span>
  <span class="kd">constructor</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nb">Object</span><span class="p">()</span>
  <span class="nx">hasOwnProperty</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">hasOwnProperty</span><span class="p">()</span>
  <span class="nx">isPrototypeOf</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">isPrototypeOf</span><span class="p">()</span>
  <span class="nx">propertyIsEnumerable</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">propertyIsEnumerable</span><span class="p">()</span>
  <span class="nx">toLocaleString</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">toLocaleString</span><span class="p">()</span>
  <span class="nx">toString</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">toString</span><span class="p">()</span>
  <span class="nx">valueOf</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">valueOf</span><span class="p">()</span>
  <span class="nx">__defineGetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__defineGetter__</span><span class="p">()</span>
  <span class="nx">__defineSetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__defineSetter__</span><span class="p">()</span>
  <span class="nx">__lookupGetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__lookupGetter__</span><span class="p">()</span>
  <span class="nx">__lookupSetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__lookupSetter__</span><span class="p">()</span>
  <span class="kd">get</span> <span class="nx">__proto__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__proto__</span><span class="p">()</span>
  <span class="kd">set</span> <span class="nx">__proto__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__proto__</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">divList</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">)</span>
  <span class="c1">//伪数组的原型链中没有数组的原型</span>
  <span class="c1">// change the divList to array</span>
  <span class="kd">let</span> <span class="nx">divList</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">divList</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">divList</span><span class="p">)</span>

  <span class="c1">// combine two array</span>
  <span class="nx">arr1</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span>
  <span class="c1">//truncate a part from an array</span>
  <span class="nx">arr1</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// start from the second element</span>
  <span class="nx">arr1</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// truncate all</span>

  <span class="c1">// !!! JS only provide shallow COPY</span>
</code></pre></div></div>
<p><img src="../../../../../assets/images/array_delete_elements.png" width="400" alt="array delete elements" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// delete the head element</span>
  <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
  <span class="nx">array</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="c1">//result: (2)[2,3]</span>
  <span class="kd">let</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>


  <span class="c1">//delete the tail element</span>
  <span class="nx">array2</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="c1">// 3</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array2</span><span class="p">)</span> <span class="c1">//result: (2)[1, 2]</span>
  <span class="c1">// something has changed</span>

  <span class="c1">// delete middle elements</span>
  <span class="kd">let</span> <span class="nx">array3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
  <span class="nx">array3</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// 3,4</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array3</span><span class="p">)</span> <span class="c1">//result: (2)[1, 2,5]</span>


  <span class="c1">// delete middle elements and add new elements</span>
  <span class="kd">let</span> <span class="nx">array4</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
  <span class="nx">array4</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">678</span><span class="p">)</span> <span class="c1">// 3,4</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array4</span><span class="p">)</span> <span class="c1">//result: (8) [1, 2, 55, 24, 23, 678, 4, 5]</span>
</code></pre></div></div>

<p><img src="../../../../../assets/images/array_check_all_elements.png" width="400" alt="check all elements" />
<img src="../../../../../assets/images/array_check_single_element.png" width="400" alt="check single element" />
<img src="../../../../../assets/images/array_check_singe_2.png" width="400" alt="check single element" />
<img src="../../../../../assets/images/array_add_element.png" width="400" alt="add element" />
<img src="../../../../../assets/images/array_add_element2.png" width="400" alt="add element" />
<img src="../../../../../assets/images/array_transform.png" width="400" alt="array_transform.png" /></p>

]]></content>
      <categories>
        
          <category> javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Javascript Object]]></title>
      <url>/javascript/2020/11/17/javascript_object/</url>
      <content type="html"><![CDATA[<h3 id="definition">Definition:</h3>
<ul>
  <li>Unordered data collection</li>
  <li>Key-Value Pair collection</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span><span class="p">:</span><span class="mi">18</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">({</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">:</span><span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span><span class="p">:</span> <span class="mi">18</span><span class="p">})</span>
</code></pre></div></div>

<h3 id="details">Details</h3>
<ul>
  <li>key name should is string, not identifier, it can include any characters</li>
  <li>quotation mark can be omitted, after omitting the quotation mark, the key name can only be represented according to the rules of the identifier</li>
  <li>when you omit the quotation mark, the key name is also string</li>
  <li>Each key is the property name of a object</li>
  <li>Each value is the property value of a object
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">[</span><span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">100</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">255</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">3.2</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">0.01</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">0.234</span><span class="dl">"</span><span class="p">]</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// can get all the keys of that obj</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="variable-as-property-name">Variable as Property name</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">xxx</span><span class="dl">'</span>
  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">:</span> <span class="mi">111</span><span class="p">}</span>
  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{[</span><span class="nx">a</span><span class="p">]:</span> <span class="mi">1111</span><span class="p">}</span> <span class="o">===</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">xxx</span><span class="p">:</span> <span class="mi">1111</span><span class="p">}</span>
</code></pre></div></div>
<ul>
  <li><strong>How to use variables as property name?</strong>
    <ul>
      <li>Previously we use constant as the property name</li>
      <li><code class="language-plaintext highlighter-rouge">let p1 = 'name'</code></li>
      <li><code class="language-plaintext highlighter-rouge">let obj = {p1: 'frank'}</code> here, the property name is <code class="language-plaintext highlighter-rouge">'p1'</code></li>
      <li><code class="language-plaintext highlighter-rouge">let obj = {[p1]: 'frank'}</code> here, the property name is <code class="language-plaintext highlighter-rouge">'name'</code></li>
    </ul>
  </li>
  <li>Compare:
    <ul>
      <li>if there is no [], the property name will automatically become the string</li>
      <li>if add [], the property will try to find the value inside of the []</li>
      <li>if the property name is not a string, it will be automatically transformed into a string</li>
    </ul>
  </li>
  <li>Five Falsy Values
    <ul>
      <li>null, undefined, 0, NaN, ‘’</li>
    </ul>
  </li>
  <li>7 data types
    <ul>
      <li>number</li>
      <li>string</li>
      <li>bool</li>
      <li>symbol</li>
      <li>null</li>
      <li>undefined</li>
      <li>object</li>
    </ul>
  </li>
</ul>

<h3 id="the-hidden-property-in-the-object">The hidden Property in the Object</h3>
<blockquote>
  <p><img src="../../../../../assets/images/hiddenObjectProperty.png" width="500" alt="hidden Object Property" /></p>

</blockquote>

<h3 id="delete-property">Delete Property</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="kc">undefined</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="c1">// result: {name: undefined, age: 18}</span>

<span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="c1">// result: {age: 18}</span>

<span class="k">delete</span> <span class="nx">obj</span><span class="p">[</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">]</span>
<span class="c1">// result: true</span>

<span class="c1">// check if you have deleted the property successfully or not</span>
<span class="c1">// true =&gt; property exists, false =&gt; property not exists</span>
<span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="k">in</span> <span class="nx">obj</span>

<span class="nx">name</span> <span class="k">in</span> <span class="nx">obj</span>
<span class="c1">// result: false</span>
<span class="c1">// because name and 'name' are different things,</span>
<span class="c1">// we have never declared or defined or assigned any value to name before</span>
<span class="c1">// name without ''  is a variable</span>
</code></pre></div></div>
<blockquote>
  <p><img src="../../../../../assets/images/DeleteProperty.png" width="500" alt="Delete Property" /></p>
</blockquote>

<h3 id="read-property">Read Property</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="c1">//result: (2)["name","age"]</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="c1">//result: (2)["frank","18"]</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="c1">//result:</span>
<span class="c1">// (2) [Array(2), Array(2)]</span>
<span class="c1">// 0: (2) ["name", "frank"]</span>
<span class="c1">// 1: (2) ["age", 18]</span>
<span class="c1">// length: 2</span>
<span class="c1">// __proto__: Array(0)</span>
</code></pre></div></div>

<p><strong>When you want to see all the properties in a object, please use  <code class="language-plaintext highlighter-rouge">Console.dir()</code>  to print out all the properties.</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="kc">undefined</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="nx">VM301</span><span class="p">:</span><span class="mi">1</span>
<span class="nb">Object</span>
  <span class="nx">age</span><span class="p">:</span> <span class="mi">18</span>
  <span class="nx">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">frank</span><span class="dl">"</span>
  <span class="nx">__proto__</span><span class="p">:</span>
  <span class="kd">constructor</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nb">Object</span><span class="p">()</span>
  <span class="nx">hasOwnProperty</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">hasOwnProperty</span><span class="p">()</span>
  <span class="nx">isPrototypeOf</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">isPrototypeOf</span><span class="p">()</span>
  <span class="nx">propertyIsEnumerable</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">propertyIsEnumerable</span><span class="p">()</span>
  <span class="nx">toLocaleString</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">toLocaleString</span><span class="p">()</span>
  <span class="nx">toString</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">toString</span><span class="p">()</span>
  <span class="nx">valueOf</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">valueOf</span><span class="p">()</span>
  <span class="nx">__defineGetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__defineGetter__</span><span class="p">()</span>
  <span class="nx">__defineSetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__defineSetter__</span><span class="p">()</span>
  <span class="nx">__lookupGetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__lookupGetter__</span><span class="p">()</span>
  <span class="nx">__lookupSetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__lookupSetter__</span><span class="p">()</span>
  <span class="kd">get</span> <span class="nx">__proto__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__proto__</span><span class="p">()</span>
  <span class="kd">set</span> <span class="nx">__proto__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__proto__</span><span class="p">()</span>
</code></pre></div></div>
<blockquote>
  <p><img src="../../../../../assets/images/CheckAllProperties.png" width="500" alt="Check All Properties" /></p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">)</span>  <span class="c1">//result: false</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">)</span>  <span class="c1">//result: true</span>
</code></pre></div></div>

<h3 id="more-explanation-about-prototype">More Explanation about Prototype</h3>
<blockquote>
  <p><img src="../../../../../assets/images/Prototype.png" width="500" alt="Prototype" />
<img src="../../../../../assets/images/LookupProperty.png" width="500" alt="Look up Prototype" />
<img src="../../../../../assets/images/Emphasis.png" width="500" alt="Emphasis property" />
<img src="../../../../../assets/images/Emphasis2.png" width="500" alt="Emphasis property2" /></p>
</blockquote>

<h3 id="add-or-modify-property-values">Add or Modify Property Values</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// direct assign value</span>
  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">}</span>  <span class="c1">//'name' is a string</span>
  <span class="kd">let</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span>  <span class="c1">//'name' is a string</span>
  <span class="nx">obj</span><span class="p">[</span><span class="dl">'</span><span class="s1">na</span><span class="dl">'</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span>
  <span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">;</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span>

  <span class="c1">//assign value in batches</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="na">p1</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="na">p2</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="na">p3</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="na">p4</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span> <span class="na">p5</span><span class="p">:</span> <span class="mi">5</span><span class="p">})</span>
</code></pre></div></div>

<h3 id="add-or-modify-prototype---common-properties">Add or Modify Prototype - <strong>Common Properties</strong></h3>
<ul>
  <li>
    <h4 id="we-cannot-modify-or-add-common-properties-by-object-itself">We cannot modify or add common Properties by object itself</h4>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span> <span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">// they have common 'toString'</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">xxx</span><span class="dl">'</span>
<span class="c1">// you can change the toString value of the Object  obj, but this toString property now only belongs to obj, not belongs to any other Object like obj2</span>

<span class="nx">obj2</span><span class="p">.</span><span class="nx">toString</span>  <span class="c1">// it still on the common properties</span>
</code></pre></div>    </div>
  </li>
  <li>
    <h4 id="if-you-insist-to-modify-or-add-value-to-the-prototype-common-property">If you insist to modify or add value to the Prototype (Common Property)</h4>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">xxx</span><span class="dl">'</span>  <span class="c1">//not recommend to use __proto__</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">xxx</span><span class="dl">'</span>

<span class="c1">// ****** Generally, please don't modify the prototype, can cause a lot of problem</span>
</code></pre></div>    </div>
    <h3 id="modify-hidden-properties">Modify hidden Properties</h3>
  </li>
  <li>
    <h4 id="not-recommend-to-use-proto">Not recommend to use <strong>proto</strong></h4>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jack</span><span class="dl">'</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">common</span> <span class="o">=</span> <span class="p">{</span><span class="na">kind</span><span class="p">:</span> <span class="dl">'</span><span class="s1">human</span><span class="dl">'</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>
</code></pre></div>    </div>
  </li>
  <li>
    <h4 id="recommend-to-use-objectcreate">Recommend to use <strong>Object.create()</strong></h4>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">)</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">)</span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">jack</span><span class="dl">'</span>

<span class="c1">//规范大概的意思是，要改就一开始就改，别后来再改</span>
<span class="c1">// 需要修改本地属性的时候 如下:</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="na">p1</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span><span class="mi">2</span><span class="p">})</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>### Code Rule
<img src="../../../../../assets/images/code_rule.png" width="500" alt="Code Rule" /></p>

]]></content>
      <categories>
        
          <category> javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[The Memory Plot of Javascript]]></title>
      <url>/javascript/2020/11/09/memory_plot_of_js/</url>
      <content type="html"><![CDATA[<h3 id="execute-js-code">Execute JS code</h3>
<ul>
  <li>Preparation before execute JS code
    <ul>
      <li>Ready Work</li>
      <li>Provide API: <strong><em>window/ document/ setTimeout</em></strong></li>
      <li>Above code does not belong to JS itself</li>
      <li>We call these code as runtime env</li>
      <li>Once put JS code into the runtime env, it starts to execute JS code</li>
    </ul>
  </li>
</ul>

<h3 id="where-is-the-js-code-running">Where is the JS code running?</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Memory
</code></pre></div></div>

<h3 id="stack-and-heap">Stack and Heap</h3>
<p><img src="../../../../../assets/images/StackHeap.png" width="500" alt="Heap and Stack" /></p>

<ul>
  <li>Red area divided into Stack and Heap</li>
  <li>The data structure about a stack and heap will be talked later</li>
  <li>Stack: Each data stored in order</li>
  <li>Heap: Each data stored randomly
    <blockquote>
      <p>Rules:</p>
      <ul>
        <li>There are two data types: Object and non-object</li>
        <li>Non-Object stores in the Stack</li>
        <li>Object stores in the Heap</li>
        <li>’=’ operator always copy right content to left</li>
        <li>
          <p>Example(When the value has been changed):</p>

          <p><img src="../../../../../assets/images/Change_Value.png" width="500" alt="Change Value" />
 <img src="../../../../../assets/images/window_picture1.png" width="500" alt="Window in memory" />
 <img src="../../../../../assets/images/window_picture2.png" width="500" alt="Window in memory 2" /></p>
        </li>
      </ul>
    </blockquote>
  </li>
</ul>

<h3 id="when-you-need-to-know-the-structure-of-a-function">When you need to know the structure of a function</h3>
<ul>
  <li>use <code class="language-plaintext highlighter-rouge">console.dir(window.Object)</code></li>
</ul>

<h3 id="what-the-difference-between-__proto__-and-prototype">What the difference between __proto__ and prototype?</h3>
<ul>
  <li>Both of then store the address of the prototype</li>
  <li>However, prototype only exists in functions</li>
  <li>__proto__ exists in every new object</li>
</ul>

<p><strong><em>Important Picture Note</em></strong></p>
<blockquote>
  <p><img src="../../../../../assets/images/Prototype_Array_Object.png" width="500" alt="Change Value" /></p>
</blockquote>
]]></content>
      <categories>
        
          <category> javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[HTTP]]></title>
      <url>/http/2020/11/05/http_note/</url>
      <content type="html"><![CDATA[<h3 id="1-url-contains-what-what-is-the-function-of-each-part-of-the-url">1. URL contains what? What is the function of each part of the URL?</h3>
<p><code class="language-plaintext highlighter-rouge">URL =&gt; Uniform Resource Locator</code></p>

<p><strong>Hosting:</strong></p>
<blockquote>
  <p>Means that all the web pages and their supporting files are available on that computer. The web server will send any web page from the website it is hosting to any user’s browser, per user request.</p>
</blockquote>

<p><strong>Perfect Explanation of Webpage and Web Server:</strong></p>
<blockquote>
  <p>Don’t confuse websites and web servers. For example, if you hear someone say, “My website is not responding”, it actually means that the web server is not responding and therefore the website is not available. More importantly, since a web server can host multiple websites, the term web server is never used to designate a website, as it could cause great confusion. In our previous example, if we said, “My web server is not responding”, it means that multiple websites on that web server are not available.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Read Articles Below!!!
</code></pre></div></div>

<ol>
  <li><a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work">How does the Internet work?</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Pages_sites_servers_and_search_engines">What is the difference between webpage, website, web server, and search engine?</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_web_server">What is a web server?</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_hyperlinks">What are hyperlinks? The concepts behind links on the web.</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL">What is a URL?</a></li>
  <li><a href="https://stackoverflow.com/questions/4913343/what-is-the-difference-between-uri-url-and-urn">What is the difference between URI, URL and URN?</a></li>
</ol>

<p><img src="../../../../../assets/images/URL_components.png" width="500" alt="URL Components" />
<img src="../../../../../assets/images/URL_Example.png" width="500" alt="URL Example" /></p>

<h3 id="2-what-the-function-of-dns-how-to-use-nslookup-command">2. What the function of DNS? How to use <strong><em>nslookup</em></strong> command?</h3>
<blockquote>
  <p>The domain name system resolves the names of internet sites with their underlying IP addresses adding efficiency and even security in the process.</p>
</blockquote>

<blockquote>
  <p>Think of DNS like your smartphone’s contact list, which matches people’s name with their phone numbers and email addresses. Then multiply that contact list by everyone else on the planet.
Example:</p>
  <ul>
    <li><strong><em>nslookup  baidu.com</em></strong>
      <blockquote>
        <ul>
          <li>Server:	192.168.0.1  Address:	192.168.0.1#53</li>
        </ul>
      </blockquote>
      <ul>
        <li>Non-authoritative answer:
          <blockquote>
            <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Name:	baidu.com Address: 220.181.38.148
</code></pre></div>            </div>
          </blockquote>
          <ul>
            <li>Name:	baidu.com Address: 39.156.69.79</li>
          </ul>
        </li>
      </ul>
    </li>
    <li><strong><em>nslookup  google.com</em></strong>
      <blockquote>
        <ul>
          <li>Server:		192.168.0.1 Address:	192.168.0.1#53</li>
        </ul>
      </blockquote>
      <ul>
        <li>Non-authoritative answer:
          <blockquote>
            <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Name:	google.com Address: 172.217.5.14
</code></pre></div>            </div>
          </blockquote>
        </li>
      </ul>
    </li>
    <li><strong><em>nslookup  github.com</em></strong>
      <blockquote>
        <ul>
          <li>Server:		192.168.0.1 Address:	192.168.0.1#53</li>
        </ul>
      </blockquote>
      <ul>
        <li>Non-authoritative answer:
          <blockquote>
            <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Name:	github.com Address: 140.82.112.4
</code></pre></div>            </div>
          </blockquote>
        </li>
      </ul>
    </li>
    <li><strong><em>nslookup  yueran-yu.github.io</em></strong>
      <blockquote>
        <ul>
          <li>SServer:		192.168.0.1 Address:	192.168.0.1#53</li>
        </ul>
      </blockquote>
      <ul>
        <li>Non-authoritative answer:
          <blockquote>
            <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Name:	yueran-yu.github.io Address: 185.199.110.153
</code></pre></div>            </div>
          </blockquote>
          <ul>
            <li>Name:	yueran-yu.github.io Address: 185.199.108.153</li>
            <li>Name:	yueran-yu.github.io Address: 185.199.109.153</li>
            <li>Name:	yueran-yu.github.io Address: 185.199.111.153</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>

</blockquote>

<h3 id="3-what-the-ip-used-for-how-to-use-ping">3. What the IP used for? How to use ping?</h3>
<blockquote>
  <p>An IP address allows information to be sent and received by the correct parties,
which means they can also be used to track down a user’s physical location.</p>
  <ul>
    <li>Some special IP
      <blockquote>
        <ul>
          <li>127.0.0.1 represent your laptop itself</li>
        </ul>
      </blockquote>
      <ul>
        <li>localhost: this is a hostname that refers to the current computer used to access it.</li>
        <li>0.0.0.0 doesn’t represent any devices.</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="4-what-is-domain-whats-the-type-of-domain">4. What is Domain, what’s the type of Domain?</h3>
<blockquote>
  <p>A domain name is your website name. A domain name is the address where Internet users can access your website. A domain name is used for finding and identifying computers on the Internet. Computers use IP addresses, which are a series of number. However, it is difficult for humans to remember strings of numbers. Because of this, domain names were developed and used to identify entities on the Internet rather than using IP addresses.</p>
</blockquote>

<h4 id="knowledge-points">Knowledge Points</h4>
<blockquote>
  <ul>
    <li>A domain name can correspond to different IPs.
      <blockquote>
        <ul>
          <li>This is called load balance to prevent one machine from breaking down.</li>
        </ul>
      </blockquote>
    </li>
    <li>One IP corresponds to a different domain name.
      <blockquote>
        <ul>
          <li>This is called a Shared host, and poor developers do it.</li>
        </ul>
      </blockquote>
    </li>
  </ul>
</blockquote>

<p><img src="../../../../../assets/images/Domain_name.png" width="500" alt="Domain Name" /></p>

<h3 id="http-request--response">HTTP Request &amp; Response</h3>
<p>You can read the article in MDN as well: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages">HTTP Messages</a></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">url</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">port</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">请指定端口号好不啦？</span><span class="se">\n</span><span class="s1">node server.js 8888 这样不会吗？</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">parsedUrl</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
  <span class="kd">var</span> <span class="nx">pathWithQuery</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span>
  <span class="kd">var</span> <span class="nx">queryString</span> <span class="o">=</span> <span class="dl">''</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">'</span><span class="s1">?</span><span class="dl">'</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="nx">queryString</span> <span class="o">=</span> <span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">'</span><span class="s1">?</span><span class="dl">'</span><span class="p">))</span> <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">parsedUrl</span><span class="p">.</span><span class="nx">pathname</span>
  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">parsedUrl</span><span class="p">.</span><span class="nx">query</span>
  <span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">method</span>

  <span class="cm">/******** 从这里开始看，上面不要看 ************/</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">有个傻子发请求过来啦！路径（带查询参数）为：</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">pathWithQuery</span><span class="p">)</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/html;charset=utf-8</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">`二哈`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">/x</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/css;charset=utf-8</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">`body{color: red;}\n`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">404</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/html;charset=utf-8</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">`你输入的路径不存在对应的内容`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="cm">/******** 代码结束，下面不要看 ************/</span>
<span class="p">})</span>
<span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">监听 </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">port</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> 成功</span><span class="se">\n</span><span class="s1">请用在空中转体720度然后用电饭煲打开 http://localhost:</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">port</span><span class="p">)</span>
</code></pre></div></div>
<blockquote>
  <h4 id="logic">Logic:</h4>
  <ul>
    <li>According to the path and return back a string</li>
    <li>Every time when you receive a request, the middle part code will be executed</li>
    <li>Use <code class="language-plaintext highlighter-rouge">if else</code> to choose the path, and return the response</li>
    <li>Return status code <code class="language-plaintext highlighter-rouge">200</code> if it is a known path</li>
    <li>Return status code <code class="language-plaintext highlighter-rouge">404</code> if the is an unknown path</li>
    <li><code class="language-plaintext highlighter-rouge">Content-Type</code> represents <code class="language-plaintext highlighter-rouge">Type/Grammar</code> of the content</li>
    <li><code class="language-plaintext highlighter-rouge">response.write()</code> represents the return content</li>
    <li><code class="language-plaintext highlighter-rouge">response.end()</code> represents when execute this code, the response will send to the user immediately</li>
  </ul>
</blockquote>

<h4 id="important">IMPORTANT!!!</h4>
<blockquote>
  <p>The function of file suffix is to facilitate the identification of applications on the operating system, front-end request or response code in the identification of files don’t rely on suffixes</p>

  <p>For example, as long as the content of the file is CSS code, the file suffix can be un.css</p>
</blockquote>

<h3 id="attention">Attention</h3>
<p><img src="../../../../../assets/images/server_runnng_state1.png" width="800" alt="Checking request details in Network" />
<img src="../../../../../assets/images/Response.png" width="500" alt="Attention" />
<img src="../../../../../assets/images/request.png" width="500" alt="When Request" />
<img src="../../../../../assets/images/response_.png" width="500" alt="When Response" /></p>

]]></content>
      <categories>
        
          <category> http </category>
        
      </categories>
      <tags>
        
          <tag> back end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Wrap Up of CSS]]></title>
      <url>/html%20and%20css/2020/10/25/wrap_up_of_css/</url>
      <content type="html"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>★ You can Try To Find More Practice Materials Online~~~ For Example: Flexbox Froggy
</code></pre></div></div>

<h3 id="layout">Layout</h3>
<ol>
  <li>The fixed width: the width always is 960/ 1000 / 1024 px</li>
  <li>Not Fixed Width: mainly depends on normal flow layout
    <ul>
      <li>The Normal Flow is automatically fitted, no more extra style</li>
    </ul>
  </li>
  <li>Responsive Layout
    <ul>
      <li>Which means the width fix in the PC, but not fix in the mobile phone</li>
      <li>In other words, mixed layout</li>
    </ul>
  </li>
</ol>

<p><img src="../../../../../assets/images/CSS_Deploy.png" width="500" alt="CSS Layout Flow Chart" /></p>

<h3 id="float">Float</h3>
<ul>
  <li>Add  <strong><em>float:left</em></strong> and <strong><em>width</em></strong> in the children elements</li>
  <li>Add <strong><em>.clearfix</em></strong> in the parent element</li>
</ul>

<h3 id="important-to-remember---flex">Important To Remember - Flex</h3>
<ul>
  <li>display:flex;</li>
  <li>flex-direction:row/column</li>
  <li>flex-wrap: wrap</li>
  <li>just-content:center / space-between</li>
  <li>align-items:center</li>
  <li>(These are basic use in work environment)</li>
</ul>

<h3 id="regular-sketch-tools">Regular sketch tools</h3>
<p><img src="../../../../../assets/images/sketch_tools.png" width="300" alt="Sketch Tools" /></p>

<h3 id="grid">Grid</h3>
<ul>
  <li>Shortcut to create multiple classes
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.a+.b+.c+.d  -&gt; press tab
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="one-picture-shows-the-div-layout">One picture shows the div layout</h3>
<p><img src="../../../../../assets/images/div_layout.png" width="500" alt="DIV Layout" /></p>

<h3 id="z-index">z-index</h3>
<p>The z-index CSS property of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.</p>

<p>For a positioned box(that is, one with any position other than static), the z-index property specifies:</p>
<ol>
  <li>The stack level of the box in the current stacking context.</li>
  <li>z-index in the current stacking context level has no interaction with other stack level.</li>
  <li>z-index in the same stack level can be compared.</li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">Stacking Content Reference</a></li>
</ol>

<h3 id="shortcut-to-call-console">Shortcut to call ‘Console’</h3>
<ul>
  <li>In any tab, press  ESC</li>
</ul>

<h3 id="the-process-of-the-browser-rendering">The Process of the Browser Rendering</h3>
<p><strong><em>Step:</em></strong></p>
<ol>
  <li>According to the HTML to construct the HTML Tree(DOM)</li>
  <li>According to the CSS construct the CSS Tree</li>
  <li>Merge two trees into one Rendering Tree</li>
  <li>Layout (Normal Flow, Box Model, Calculate Size and Position)</li>
  <li>Painting (Draw out the border color, font color, shadow)</li>
  <li>Finally compose all the parts together</li>
</ol>

<h3 id="rendering-performance-cramming">Rendering Performance (Cramming)</h3>
<ol>
  <li><strong>Optimizing Javascript Execution</strong>
    <ul>
      <li>Avoid setTimeout or <strong><em>setInterval</em></strong> for visual updates; always use <strong><em>requestAnimationFrame</em></strong> instead.</li>
      <li>Move long-running Javascript off the main thread to Web Workers.</li>
      <li>Use micro-tasks to make DOM changes over several frames.</li>
      <li>Use Chrome DevTools’ Timeline and Javascript Profiler to assess the impact of Javascript.</li>
    </ul>
  </li>
  <li><strong>Reduce the Scope and Complexity of Style Calculations</strong>
    <ul>
      <li>Reduce the complexity of your selectors; use a class-centric methodology like BEM.</li>
      <li>Reduce the number of elements on which style calculation must be calculated.</li>
    </ul>
  </li>
  <li><strong>Avoid Large, Complex Layouts and Layout Thrashing</strong>
    <ul>
      <li>Similarly to style calculations, the immediate concerns for layout cost are:
        <ul>
          <li>The number of elements that require layout.</li>
          <li>The complexity of those layouts.</li>
        </ul>
      </li>
      <li>Layout is normally scoped to the whole document.</li>
      <li>The number of DOM elements will affect performance; you should avoid triggering layout wherever possible.</li>
      <li>Assess layout model performance; new Flexbox is typically faster than older Flexbox or float-based layout models.</li>
      <li>Avoid forced synchronous layouts and layout thrashing; read style values then make style changes.</li>
    </ul>
  </li>
  <li><strong>Simplify Paint Complexity and Reduce Paint Areas</strong>
    <ul>
      <li>Changing any property apart from transforms or opacity always triggers paint.</li>
      <li>Paint is often the most expensive part of the pixel pipeline; avoid it where you can.</li>
      <li>Reduce paint areas through layer promotion and orchestration of animations.</li>
      <li>Use the Chrome DevTools paint profiler to assess paint complexity and cost; reduce where you can.</li>
    </ul>
  </li>
  <li><strong>Stick to Compositor-Only Properties and Manage Layer Count</strong>
    <ul>
      <li>Stick to transform and opacity changes for your animations.</li>
      <li>Promote moving elements with <strong><em>will-change</em></strong> or <strong><em>translateZ</em></strong>.</li>
      <li>Avoid overusing promotion rules; layers require memory and management.</li>
    </ul>
  </li>
  <li><strong>Debounce Your Input Handlers</strong>
    <ul>
      <li>Avoid long-running input handlers; they can block scrolling.</li>
      <li>Do not make style changes in input handlers.</li>
      <li>Debounce your handlers; store event values and deal with style changes in the next requestAnimationFrame callback.</li>
    </ul>
  </li>
</ol>

<h3 id="how-to-debug-the-hover-effect">How to Debug the <strong><em>[Hover]</em></strong> Effect</h3>
<ul>
  <li>Open DevTools</li>
  <li>In the Style Tab, find out [:hov] in the top right conner and click it</li>
  <li>Check [:hover]</li>
  <li>Find out <code class="language-plaintext highlighter-rouge">#demo:hover{transform: translateX(50px)}</code></li>
  <li>Press <strong>UP</strong> or <strong>DOWN</strong> key to see the demo box moving 1px each time consecutively</li>
  <li>Press <strong>Shift</strong> + <strong>UP</strong> or <strong>DOWN</strong> , the demo box will move 10px each time consecutively</li>
</ul>

<h3 id="how-to-use-transform-to-center-the-box-cramming">How to Use Transform to Center the Box (Cramming)</h3>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.wrapper1</span>
<span class="p">{</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">5px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">600px</span><span class="p">;</span>
  <span class="p">}</span>

<span class="nf">#demo1</span>
<span class="p">{</span>
<span class="nl">width</span><span class="p">:</span><span class="m">200px</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span><span class="m">200px</span><span class="p">;</span>
<span class="nl">border</span><span class="p">:</span><span class="m">1px</span> <span class="nb">solid</span> <span class="no">green</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">left</span><span class="p">:</span><span class="m">50%</span><span class="p">;</span>
<span class="nl">top</span><span class="p">:</span><span class="m">50%</span><span class="p">;</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">-50%</span> <span class="m">-50%</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="transition">Transition</h3>
<ul>
  <li>Not all the properties can use transition</li>
  <li>Display:none =&gt; block can not be transited</li>
  <li>Should use <strong><em>visibility:hidden =&gt; visible</em></strong> instead</li>
  <li>Background and Opacity can use transition</li>
</ul>

<h3 id="animation---keyframe-syntax">Animation - KeyFrame Syntax</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Animation:
   time ||
   timing-function = linear ||
   single-animation-iteration-count = infinite||
   single-animation-direction = normal, reverse...||
   single-animation-fill-mode = none, forwards, backwards ||
   single-animation-play-state = running, paused ||
   keyframes-name
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> html and css </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Usage of 'a' Tag]]></title>
      <url>/html%20and%20css/2020/10/16/usage_of_a_tag/</url>
      <content type="html"><![CDATA[<h3 id="1-href">1. href</h3>

<h4 id="1-linking-to-relative-urls">(1) Linking to relative URLs</h4>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href= </span><span class="s">"//google.com"</span><span class="nt">&gt;</span>Go To Google<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Q: Why use '//google.com' instead of 'https://www.google.com' and 'http://www.google.com?'
A: Because '//' can automatically recognize if the website using the 'https' or 'http' protocol.
</code></pre></div></div>

<h4 id="2-jump-to-one-point-of-the-same-html-page">(2) Jump to one point of the same html page</h4>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;p&gt;</span>1<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>2<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>3<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>4<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>5<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">"xxx"</span><span class="nt">&gt;</span>6<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>7<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>8<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>9<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href= </span><span class="s">"#xxx"</span><span class="nt">&gt;</span>Go To 6<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You can locate one point in the same html page by using a id tag in the href.
</code></pre></div></div>

<h4 id="3-linking-to--email-or-telephone">(3) Linking to  email or telephone</h4>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"mailto:librayuyue@163.com"</span><span class="nt">&gt;</span>Send Email to Me<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"tel:2032123212"</span> <span class="na">target=</span><span class="s">"_self"</span><span class="nt">&gt;</span>Send Message to Me<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>

<h3 id="2-target">2. target</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1) "_self" is a default value of target, it will open the new page based on current page.
(2) "_blank" usually a ne tab
(3) "_parent" the parent browsing context of the current one. If no parent, behaves as _self.
(4) "_top" the topmost browsing context(the "highest" context that's an ancestor of the current one.) if no ancestors, behaves as _self.
</code></pre></div></div>

<h3 id="3-download">3. download</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MDN Quote: "Prompts the user to save the linekd URL instead of nabigating to it. Can be used with or without a value."
</code></pre></div></div>

<h3 id="4-rel--noopener">4. rel = noopener</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Not important
</code></pre></div></div>

<h2 id="the-usage-of-img-tag">The Usage of ‘img’ Tag</h2>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;img</span> <span class="na">id=</span><span class="s">xxx</span> <span class="na">src=</span><span class="s">"dog.png"</span> <span class="na">alt=</span><span class="s">"one dog"</span><span class="nt">&gt;</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1) The 'src' attribute is required. It contains the path to the image you want to embed.
(2) 'alt' attribute holds a text description of the image. When the image failed to load, the alt text will be displayed.
(3) 'max-width: 100%;' it sets the maximum width of an element. It prevents the used value of the width property from becoming larger than the value specified by max-width.
</code></pre></div></div>

<h2 id="the-usage-of-table-tag">The Usage of ‘table’ Tag</h2>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table&gt;</span>
    <span class="nt">&lt;thead&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;th&gt;</span>English<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th&gt;</span>Translate<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/thead&gt;</span>
    <span class="nt">&lt;tbody&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>Hyper<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span>超级<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>Target<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span>目标<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>Reference<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span>引用 <span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/tbody&gt;</span>
    <span class="nt">&lt;tfoot&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>空<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span>空<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/tfoot&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'table' contains 'thead', 'tbody' and 'tfoot'. These three tags can change the order but the browser will consistently display them in the default order.
</code></pre></div></div>

<h2 id="other-thoughts">Other Thoughts</h2>
<h3 id="the-use-of-javascript-pseudo-code"><em>The Use of javascript:; （pseudo code）</em></h3>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;p&gt;&lt;a</span> <span class="na">href=</span><span class="s">"javascript: alert(1);"</span><span class="nt">&gt;</span>javascript pseudo protocols.<span class="nt">&lt;/a&gt;&lt;/p&gt;</span>
 <span class="nt">&lt;p&gt;&lt;a</span> <span class="na">href=</span><span class="s">"javascript:;"</span><span class="nt">&gt;</span>click<span class="nt">&lt;/a&gt;&lt;/p&gt;</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>When click the second link, the page will not refreshed and there is no new record in the network tab. But the click effect is still work.
</code></pre></div></div>

<h3 id="the-difference-between-input-and-button"><em>The difference between ‘input’ and ‘button’</em></h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>you can not put any other thing inside the input tag, while you can put something like 'strong','em' or even 'img' tag inside a button tag.
</code></pre></div></div>

]]></content>
      <categories>
        
          <category> html and css </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[HTML &CSS Notes]]></title>
      <url>/html%20and%20css/2020/10/13/html_css_notes/</url>
      <content type="html"><![CDATA[<h3 id="shortcut-to-create-the-ul-list">Shortcut to create the ul list</h3>
<ol>
  <li>select many lines</li>
  <li>in the vscode，press ‘command +shift + p’ together</li>
  <li>then search ‘emmet wrap’</li>
  <li>Select ‘individual line with abbreviation’</li>
  <li>enter  ‘ul&gt;li*’</li>
</ol>

<h3 id="mbp-delete-shortcut">MBP delete Shortcut</h3>
<ul>
  <li><strong>option + delete:</strong>
    <ul>
      <li>delete one sentence or a word before the cursor</li>
    </ul>
  </li>
  <li><strong>command + delete:</strong>
    <ul>
      <li>delete a whole line sentence</li>
    </ul>
  </li>
  <li><strong>fn + delete:</strong>
    <ul>
      <li>delete the word after the cursor</li>
    </ul>
  </li>
</ul>

<h3 id="when-add-photos">When add Photos</h3>
<ul>
  <li>Don’t transform the pictures, can’t set the width and height at the same time.</li>
  <li>You can use the online tool to reshape the proportion of the pictures</li>
  <li>If the size of the picture is too big( over 300kb), compress the picture to smaller size.</li>
</ul>

<h3 id="how-to-make-the-webpage-compatible-with-the-mobile-phone">How to make the webpage compatible with the mobile phone.</h3>
<ul>
  <li>add ‘meta:vp’ (tab) and ‘img max-width’</li>
</ul>

<h3 id="use-wifi-test-the-webpage-in-mobile-phone">Use WIFI test the webpage in mobile phone</h3>
<ol>
  <li>keep the mobile and the laptop within the same WIFI</li>
  <li>you can use the IP and port to visit the laptop directly</li>
  <li>Which IP address you can use? Try through all the IP addresses the http-server give to you.</li>
</ol>

<h3 id="️-tips-when-search-in-chrome">⭐️ Tips: when search in Chrome</h3>
<ul>
  <li>For example: search keywords =&gt;”chrome remote debug -csdn”,  the “-csdn” means  remove all the information source from the CSDN website.</li>
</ul>

<h3 id="️-open-the-inspect">⭐️ Open the ‘Inspect’</h3>
<ul>
  <li>cmd + option + J</li>
</ul>

<h3 id="systematic-learning">Systematic Learning</h3>
<h4 id="what-you-need-to-get-the-hang-of-when-you-learn-a-new-language">What you need to get the Hang of when you learn a new language?</h4>
<ol>
  <li>grammar - know how to code</li>
  <li>debug - know where is wrong</li>
  <li>Look up reference materials - copy code</li>
  <li>Who is the standard maker?</li>
</ol>

<h4 id="how-to-learn">How to learn?</h4>
<ol>
  <li>Copy - Copy document, and copy teacher</li>
  <li>Run - running the code in your self compiler</li>
  <li>Modify - infuse your own thought and run again</li>
</ol>

<h4 id="css-grammar">CSS Grammar</h4>
<ul>
  <li><em>@charset “UTF-8”</em></li>
  <li><em>@import url(2.css);</em></li>
  <li><em>@media (min-width: 100px) and (max-width: 200px){ … }</em></li>
</ul>

<blockquote>
  <p>Attention:</p>
  <ol>
    <li>@charset must in the first line</li>
    <li>the first two grammars must end with semicolon</li>
    <li>@media is a unique block of knowledge</li>
    <li>charset means  “character sets”</li>
    <li>UTF-8 is a compromise character encoding that can be as compact as ASCII (if the file is just plain English text) but can also contain any unicode characters (with some increase in file size).</li>
  </ol>
</blockquote>

<h4 id="where-can-you-find-the-material-of-css">Where can you find the material of CSS?</h4>
<blockquote>
  <ul>
    <li>Google keywords + MDN</li>
    <li>CSS Tricks</li>
    <li>张鑫旭博客</li>
  </ul>
</blockquote>

<h4 id="where-can-i-find-the-practice-material">Where Can I find the practice material?</h4>
<ul>
  <li><strong><em>PSD</em></strong>
    <ul>
      <li>Freepik, search PSD =&gt; search “web”</li>
      <li>365PSD UI set</li>
    </ul>
  </li>
  <li><strong><em>Effective Pictures</em></strong>(NOT provide download)
    <ul>
      <li>dribbble.com: top designer community =&gt; search “web”</li>
      <li>Imitate by eye</li>
    </ul>
  </li>
  <li><strong><em>E-Commerce Website</em></strong>
    <ul>
      <li>directly imitate</li>
    </ul>
  </li>
</ul>

<p><strong><em>Important!!! DON’T OBSESSED WITH IMITATION!!!</em></strong></p>
<blockquote>
  <p>Only imitate no more than two PC website, phone website, UI set. Useless to do more imitation.</p>
</blockquote>

<h3 id="normal-flow">Normal Flow</h3>
<blockquote>
  <ul>
    <li>Flow Direction
      <blockquote>
        <ul>
          <li>inline element direct from left to right, it will change line until to the rightmost.</li>
          <li>block element direct from up to down, each block belongs to a line</li>
          <li>inline-block direct from left to right, but it will never separate itself into two lines if it’s at the line end.</li>
        </ul>
      </blockquote>
    </li>
  </ul>

  <p><strong><em>IMPORTANT!!! Don’t put a block element inside a inline element!!!</em></strong></p>
  <ul>
    <li>Width
      <blockquote>
        <ul>
          <li>the width of inline element is the sum of all elements inside the inline element, can’t use width</li>
          <li>block will default calculate the width, can assign value to width</li>
          <li>inline-block combine the merits of inline and block, can assign value to width</li>
          <li>shortcut to create multiple span =&gt; span.id{The number is} *</li>
        </ul>
      </blockquote>
      <ul>
        <li><strong><em>IMPORTANT!!! Never give a div element “width=100%;”</em></strong></li>
      </ul>
    </li>
    <li>Height
      <blockquote>
        <ul>
          <li>The height of inline can be decided by the line-height</li>
          <li>line-height can be inherited by the inside inline element</li>
          <li>内联元素的文字如果在滚动条所在的框里，那么框会显示文字的所有内容，不存在需要横向拉动滚动条才能看见剩余的文字情况。</li>
        </ul>
      </blockquote>
    </li>
  </ul>
</blockquote>

<h3 id="overflow">Overflow</h3>
<ul>
  <li>When content more than a container area, it will overflow</li>
  <li>overflow: auto - based one the content to display the scroll bar or not</li>
  <li>overflow: scroll - always display scroll bar</li>
  <li>overflow: hidden - hidden the overflow part</li>
  <li>overflow: visible - show all the content even it is out of the box</li>
</ul>

<h3 id="box-model">BOX Model</h3>
<p><img src="../../../../../assets/images/box.png" width="500" alt="box model" /></p>
<blockquote>
  <ul>
    <li>Content-Box
      <blockquote>
        <ul>
          <li>Content is the yardstick of a border</li>
          <li>content-box width = content width</li>
        </ul>
      </blockquote>
    </li>
    <li>Border-Box
      <blockquote>
        <ul>
          <li>Border is the yardstick of a border</li>
          <li>border-box width = content width + padding + border</li>
        </ul>
      </blockquote>
    </li>
  </ul>

  <p>Which one is better to use?</p>
  <ul>
    <li>Border-box: including padding, border width together</li>
  </ul>
</blockquote>

<h3 id="how-to-use-alibaba-icon">How to use alibaba icon</h3>
<p><a href="https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.17&amp;helptype=code">How to Use Icon</a></p>

<h3 id="about-css-height">About CSS Height</h3>
<blockquote>
  <p>Only the innermost elements can add height, the outside elements should use padding or margin to fill in and put up the box.</p>

</blockquote>

<h3 id="css-reset-code">CSS Reset Code</h3>
<pre><code class="language-CSS">    *{box-sizing: border-box;}
    *:before, *:after{box-sizing:border-box;}
    *{margin:0; padding:0;}
    ul, ol { list-style: none;}
    a{color:inherit; text-decoration: none;}
</code></pre>

<h3 id="figma-tips">Figma Tips</h3>
<ul>
  <li>Copy a Rectangle: Mac press <code class="language-plaintext highlighter-rouge">option</code> , Win press <code class="language-plaintext highlighter-rouge">Alt</code>,then drag the original rectangle to the target place</li>
  <li>White: <code class="language-plaintext highlighter-rouge">#ffffff</code></li>
  <li>Black: <code class="language-plaintext highlighter-rouge">#000000</code></li>
  <li>Grey: <code class="language-plaintext highlighter-rouge">#EEEEEE</code></li>
  <li>Border Color: <code class="language-plaintext highlighter-rouge">dddddd</code></li>
  <li>Adjust the size of image without deformation: Press <code class="language-plaintext highlighter-rouge">shift</code> to drag image</li>
  <li>Check space or pixel between 2 rectangles:
    <ul>
      <li>Select one rectangle, press <code class="language-plaintext highlighter-rouge">option</code>, hover to another rectangle, you will see the pixel between them</li>
      <li><img src="../../../../../assets/images/check_pixel.png" width="800" alt="check_pixel.png" /></li>
    </ul>
  </li>
</ul>
]]></content>
      <categories>
        
          <category> html and css </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
